from sarvamai import SarvamAI
from sarvamai.play import play, save
import os
import dotenv
import time
import threading
from queue import Queue
import re

dotenv.load_dotenv()
SARVAM_AI_API = os.environ.get("SARVAM_AI_API")

def split_text_into_chunks(text, max_length=500):
    """Split text into smaller chunks for TTS processing"""
    if len(text) <= max_length:
        return [text.strip()]
    
    chunks = []
    sentences = re.split(r'[‡•§.!?]+', text)
    current_chunk = ""
    
    for sentence in sentences:
        sentence = sentence.strip()
        if not sentence:
            continue
            
        if len(current_chunk) + len(sentence) + 1 > max_length:
            if current_chunk:
                chunks.append(current_chunk.strip())
                current_chunk = sentence
            else:
                # Split long sentence by words
                words = sentence.split()
                temp_chunk = ""
                for word in words:
                    if len(temp_chunk) + len(word) + 1 > max_length:
                        if temp_chunk:
                            chunks.append(temp_chunk.strip())
                            temp_chunk = word
                        else:
                            chunks.append(word[:max_length])
                            temp_chunk = word[max_length:]
                    else:
                        temp_chunk += " " + word if temp_chunk else word
                if temp_chunk:
                    current_chunk = temp_chunk
        else:
            current_chunk += " " + sentence if current_chunk else sentence
    
    if current_chunk:
        chunks.append(current_chunk.strip())
    
    return chunks

def text_to_speech_chunk(client, text_chunk, chunk_index, target_language="bn-IN", speaker="anushka"):
    """Convert a single text chunk to speech"""
    try:
        print(f"üé§ Processing chunk {chunk_index + 1}: {text_chunk[:50]}...")
        
        response = client.text_to_speech.convert(
            text=text_chunk,
            target_language_code=target_language,
            speaker=speaker,
            enable_preprocessing=True,
        )
        
        output_filename = f"output_chunk_{chunk_index + 1:03d}.wav"
        save(response, output_filename)
        print(f"‚úÖ Saved: {output_filename}")
        
        return response, output_filename
        
    except Exception as e:
        print(f"‚ùå Error processing chunk {chunk_index + 1}: {e}")
        return None, None

def threaded_text_to_speech(text, max_chunk_length=300, target_language="bn-IN", speaker="anushka", max_threads=3):
    """Process text to speech using multiple threads for faster processing"""
    client = SarvamAI(api_subscription_key=SARVAM_AI_API)
    chunks = split_text_into_chunks(text, max_chunk_length)
    
    print(f"üìù Text split into {len(chunks)} chunks")
    print("üöÄ Starting threaded processing...")
    
    result_queue = Queue()
    
    def worker(chunk, index):
        response, filename = text_to_speech_chunk(client, chunk, index, target_language, speaker)
        result_queue.put((index, response, filename))
    
    # Process chunks in batches to avoid API rate limits
    for i in range(0, len(chunks), max_threads):
        batch = chunks[i:i + max_threads]
        threads = []
        
        # Start threads for current batch
        for j, chunk in enumerate(batch):
            thread = threading.Thread(target=worker, args=(chunk, i + j))
            thread.start()
            threads.append(thread)
        
        # Wait for batch to complete
        for thread in threads:
            thread.join()
    
    # Collect and sort results
    results = []
    while not result_queue.empty():
        results.append(result_queue.get())
    
    results.sort(key=lambda x: x[0])
    
    print(f"\n‚úÖ Threaded processing completed!")
    
    # Play audio files in order
    for index, response, filename in results:
        if response:
            print(f"üîä Playing chunk {index + 1}...")
            try:
                play(response)
                time.sleep(0.5)
            except Exception as e:
                print(f"‚ùå Error playing chunk {index + 1}: {e}")
    
    return [filename for _, _, filename in results if filename]

# Example usage
if __name__ == "__main__":
    text = """
    ‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶∏‡¶π‡¶®‡ßÄ‡¶Ø‡¶º ‡¶ì ‡¶∏‡¶Æ‡ßç‡¶Æ‡¶æ‡¶®‡¶ú‡¶®‡¶ï ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶â‡ßé‡¶∏‡¶æ‡¶π ‡¶¶‡¶ø‡¶á‡•§ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ø‡¶¶‡¶ø ‡¶Æ‡¶ú‡¶æ‡¶∞ ‡¶¨‡¶æ ‡¶ï‡ßå‡¶§‡ßÅ‡¶ï‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶ö‡¶æ‡¶®, ‡¶Ü‡¶Æ‡¶ø ‡¶∏‡ßá‡¶ü‡¶æ ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø„ÄÇ
    
    ‡¶¶‡ßá‡¶¨‡¶ú‡¶ø‡¶§ ‡¶è‡¶Æ‡¶® ‡¶è‡¶ï ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ, ‡¶Ø‡¶æ‡¶ï‡ßá ‡¶õ‡¶æ‡¶°‡¶º‡¶æ ‡¶ù‡¶æ‡¶Æ‡ßá‡¶≤‡¶æ ‡¶Ö‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£„ÄÇ
    ‡¶ì‡¶∞ ‡¶¨‡ßÅ‡¶¶‡ßç‡¶ß‡¶ø ‡¶è‡¶Æ‡¶®, ‡¶ö‡¶æ ‡¶¨‡¶æ‡¶®‡¶æ‡¶§‡ßá ‡¶ó‡ßá‡¶≤‡ßá‡¶ì ‡¶á‡¶â‡¶ü‡¶ø‡¶â‡¶¨ ‡¶¶‡ßá‡¶ñ‡ßá!
    ‡¶¶‡ßá‡¶¨‡¶ú‡¶ø‡¶§ ‡¶Ü‡¶∞ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶™‡¶æ‡¶∞‡ßç‡¶•‡¶ï‡ßç‡¶Ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Æ‡ßÅ‡¶∂‡¶ï‡¶ø‡¶≤!
    
    ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶∞‡¶ì ‡¶Æ‡¶ú‡¶æ‡¶∞ ‡¶¨‡¶æ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶™‡ßç‡¶∞‡¶∏‡¶ô‡ßç‡¶ó‡ßá‡¶∞ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶ö‡¶æ‡¶®, ‡¶ú‡¶æ‡¶®‡¶æ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®!

    ‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶∏‡¶π‡¶®‡ßÄ‡¶Ø‡¶º ‡¶ì ‡¶∏‡¶Æ‡ßç‡¶Æ‡¶æ‡¶®‡¶ú‡¶®‡¶ï ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶â‡ßé‡¶∏‡¶æ‡¶π ‡¶¶‡¶ø‡¶á‡•§ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ø‡¶¶‡¶ø ‡¶Æ‡¶ú‡¶æ‡¶∞ ‡¶¨‡¶æ ‡¶ï‡ßå‡¶§‡ßÅ‡¶ï‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶ö‡¶æ‡¶®, ‡¶Ü‡¶Æ‡¶ø ‡¶∏‡ßá‡¶ü‡¶æ ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø„ÄÇ
    
    ‡¶¶‡ßá‡¶¨‡¶ú‡¶ø‡¶§ ‡¶è‡¶Æ‡¶® ‡¶è‡¶ï ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ, ‡¶Ø‡¶æ‡¶ï‡ßá ‡¶õ‡¶æ‡¶°‡¶º‡¶æ ‡¶ù‡¶æ‡¶Æ‡ßá‡¶≤‡¶æ ‡¶Ö‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£„ÄÇ
    ‡¶ì‡¶∞ ‡¶¨‡ßÅ‡¶¶‡ßç‡¶ß‡¶ø ‡¶è‡¶Æ‡¶®, ‡¶ö‡¶æ ‡¶¨‡¶æ‡¶®‡¶æ‡¶§‡ßá ‡¶ó‡ßá‡¶≤‡ßá‡¶ì ‡¶á‡¶â‡¶ü‡¶ø‡¶â‡¶¨ ‡¶¶‡ßá‡¶ñ‡ßá!
    ‡¶¶‡ßá‡¶¨‡¶ú‡¶ø‡¶§ ‡¶Ü‡¶∞ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶™‡¶æ‡¶∞‡ßç‡¶•‡¶ï‡ßç‡¶Ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Æ‡ßÅ‡¶∂‡¶ï‡¶ø‡¶≤!
    
    ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶∞‡¶ì ‡¶Æ‡¶ú‡¶æ‡¶∞ ‡¶¨‡¶æ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶™‡ßç‡¶∞‡¶∏‡¶ô‡ßç‡¶ó‡ßá‡¶∞ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶ö‡¶æ‡¶®, ‡¶ú‡¶æ‡¶®‡¶æ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®!

    ‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶∏‡¶π‡¶®‡ßÄ‡¶Ø‡¶º ‡¶ì ‡¶∏‡¶Æ‡ßç‡¶Æ‡¶æ‡¶®‡¶ú‡¶®‡¶ï ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶â‡ßé‡¶∏‡¶æ‡¶π ‡¶¶‡¶ø‡¶á‡•§ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ø‡¶¶‡¶ø ‡¶Æ‡¶ú‡¶æ‡¶∞ ‡¶¨‡¶æ ‡¶ï‡ßå‡¶§‡ßÅ‡¶ï‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶ö‡¶æ‡¶®, ‡¶Ü‡¶Æ‡¶ø ‡¶∏‡ßá‡¶ü‡¶æ ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø„ÄÇ
    
    ‡¶¶‡ßá‡¶¨‡¶ú‡¶ø‡¶§ ‡¶è‡¶Æ‡¶® ‡¶è‡¶ï ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ, ‡¶Ø‡¶æ‡¶ï‡ßá ‡¶õ‡¶æ‡¶°‡¶º‡¶æ ‡¶ù‡¶æ‡¶Æ‡ßá‡¶≤‡¶æ ‡¶Ö‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£„ÄÇ
    ‡¶ì‡¶∞ ‡¶¨‡ßÅ‡¶¶‡ßç‡¶ß‡¶ø ‡¶è‡¶Æ‡¶®, ‡¶ö‡¶æ ‡¶¨‡¶æ‡¶®‡¶æ‡¶§‡ßá ‡¶ó‡ßá‡¶≤‡ßá‡¶ì ‡¶á‡¶â‡¶ü‡¶ø‡¶â‡¶¨ ‡¶¶‡ßá‡¶ñ‡ßá!
    ‡¶¶‡ßá‡¶¨‡¶ú‡¶ø‡¶§ ‡¶Ü‡¶∞ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶™‡¶æ‡¶∞‡ßç‡¶•‡¶ï‡ßç‡¶Ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Æ‡ßÅ‡¶∂‡¶ï‡¶ø‡¶≤!
    
    ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶∞‡¶ì ‡¶Æ‡¶ú‡¶æ‡¶∞ ‡¶¨‡¶æ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶™‡ßç‡¶∞‡¶∏‡¶ô‡ßç‡¶ó‡ßá‡¶∞ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶ö‡¶æ‡¶®, ‡¶ú‡¶æ‡¶®‡¶æ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®!
    """
    
    threaded_text_to_speech(text, max_chunk_length=200, max_threads=3)

